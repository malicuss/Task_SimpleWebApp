/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> ApiCategoriesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> ApiCategoriesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Category</returns>
        Category ApiCategoryCategoryIdGet (int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> ApiCategoryCategoryIdGetWithHttpInfo (int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>string</returns>
        string ApiCategoryImageCategoryIdGet (int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCategoryImageCategoryIdGetWithHttpInfo (int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiPostProductProductPost (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiPostProductProductPostWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiProductProductDelete (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiProductProductDeleteWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Product</returns>
        Product ApiProductProductIdGet (int? productId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiProductProductIdGetWithHttpInfo (int? productId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiProductsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiProductsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiPutCategoryImagePut (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiPutCategoryImagePutWithHttpInfo (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        bool? ApiPutProductProductPut (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiPutProductProductPutWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> ApiCategoriesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> ApiCategoriesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> ApiCategoryCategoryIdGetAsync (int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> ApiCategoryCategoryIdGetAsyncWithHttpInfo (int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCategoryImageCategoryIdGetAsync (int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCategoryImageCategoryIdGetAsyncWithHttpInfo (int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiPostProductProductPostAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPostProductProductPostAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiProductProductDeleteAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiProductProductDeleteAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiProductProductIdGetAsync (int? productId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductProductIdGetAsyncWithHttpInfo (int? productId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiProductsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiPutCategoryImagePutAsync (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPutCategoryImagePutAsyncWithHttpInfo (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiPutProductProductPutAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPutProductProductPutAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ApiApi : IApiApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApiApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> ApiCategoriesGet ()
        {
             ApiResponse<List<Category>> localVarResponse = ApiCategoriesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public ApiResponse< List<Category> > ApiCategoriesGetWithHttpInfo ()
        {

            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> ApiCategoriesGetAsync ()
        {
             ApiResponse<List<Category>> localVarResponse = await ApiCategoriesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Category>>> ApiCategoriesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Category>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Category</returns>
        public Category ApiCategoryCategoryIdGet (int? categoryId = null)
        {
             ApiResponse<Category> localVarResponse = ApiCategoryCategoryIdGetWithHttpInfo(categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > ApiCategoryCategoryIdGetWithHttpInfo (int? categoryId = null)
        {

            var localVarPath = "/api/Category/categoryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoryCategoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> ApiCategoryCategoryIdGetAsync (int? categoryId = null)
        {
             ApiResponse<Category> localVarResponse = await ApiCategoryCategoryIdGetAsyncWithHttpInfo(categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> ApiCategoryCategoryIdGetAsyncWithHttpInfo (int? categoryId = null)
        {

            var localVarPath = "/api/Category/categoryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoryCategoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Category) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCategoryImageCategoryIdGet (int? categoryId = null)
        {
             ApiResponse<string> localVarResponse = ApiCategoryImageCategoryIdGetWithHttpInfo(categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiCategoryImageCategoryIdGetWithHttpInfo (int? categoryId = null)
        {

            var localVarPath = "/api/CategoryImage/categoryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoryImageCategoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCategoryImageCategoryIdGetAsync (int? categoryId = null)
        {
             ApiResponse<string> localVarResponse = await ApiCategoryImageCategoryIdGetAsyncWithHttpInfo(categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiCategoryImageCategoryIdGetAsyncWithHttpInfo (int? categoryId = null)
        {

            var localVarPath = "/api/CategoryImage/categoryId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiCategoryImageCategoryIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiPostProductProductPost (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = ApiPostProductProductPostWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiPostProductProductPostWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/PostProduct/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPostProductProductPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiPostProductProductPostAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiPostProductProductPostAsyncWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPostProductProductPostAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/PostProduct/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPostProductProductPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiProductProductDelete (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = ApiProductProductDeleteWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiProductProductDeleteWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/Product/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductProductDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiProductProductDeleteAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiProductProductDeleteAsyncWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiProductProductDeleteAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/Product/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductProductDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Product</returns>
        public Product ApiProductProductIdGet (int? productId = null)
        {
             ApiResponse<Product> localVarResponse = ApiProductProductIdGetWithHttpInfo(productId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ApiProductProductIdGetWithHttpInfo (int? productId = null)
        {

            var localVarPath = "/api/Product/productId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiProductProductIdGetAsync (int? productId = null)
        {
             ApiResponse<Product> localVarResponse = await ApiProductProductIdGetAsyncWithHttpInfo(productId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ApiProductProductIdGetAsyncWithHttpInfo (int? productId = null)
        {

            var localVarPath = "/api/Product/productId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiProductsGet ()
        {
             ApiResponse<List<Product>> localVarResponse = ApiProductsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > ApiProductsGetWithHttpInfo ()
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiProductsGetAsync ()
        {
             ApiResponse<List<Product>> localVarResponse = await ApiProductsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiProductsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Product>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiPutCategoryImagePut (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null)
        {
             ApiResponse<bool?> localVarResponse = ApiPutCategoryImagePutWithHttpInfo(contentType, contentDisposition, headers, length, name, fileName, categoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiPutCategoryImagePutWithHttpInfo (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null)
        {

            var localVarPath = "/api/PutCategoryImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPutCategoryImagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiPutCategoryImagePutAsync (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiPutCategoryImagePutAsyncWithHttpInfo(contentType, contentDisposition, headers, length, name, fileName, categoryId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> (optional)</param>
        /// <param name="contentDisposition"> (optional)</param>
        /// <param name="headers"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="fileName"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPutCategoryImagePutAsyncWithHttpInfo (string contentType = null, string contentDisposition = null, Dictionary<string, List<string>> headers = null, long? length = null, string name = null, string fileName = null, int? categoryId = null)
        {

            var localVarPath = "/api/PutCategoryImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "categoryId", categoryId)); // query parameter
            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPutCategoryImagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? ApiPutProductProductPut (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = ApiPutProductProductPutWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiPutProductProductPutWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/PutProduct/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPutProductProductPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiPutProductProductPutAsync (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {
             ApiResponse<bool?> localVarResponse = await ApiPutProductProductPutAsyncWithHttpInfo(productId, productName, supplierId, categoryId, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, categoryCategoryId, categoryCategoryName, categoryDescription, categoryPicture, categoryProducts, supplierSupplierId, supplierCompanyName, supplierContactName, supplierContactTitle, supplierAddress, supplierCity, supplierRegion, supplierPostalCode, supplierCountry, supplierPhone, supplierFax, supplierHomePage, supplierProducts, orderDetails, categories, suppliers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"> (optional)</param>
        /// <param name="productName"> (optional)</param>
        /// <param name="supplierId"> (optional)</param>
        /// <param name="categoryId"> (optional)</param>
        /// <param name="quantityPerUnit"> (optional)</param>
        /// <param name="unitPrice"> (optional)</param>
        /// <param name="unitsInStock"> (optional)</param>
        /// <param name="unitsOnOrder"> (optional)</param>
        /// <param name="reorderLevel"> (optional)</param>
        /// <param name="discontinued"> (optional)</param>
        /// <param name="categoryCategoryId"> (optional)</param>
        /// <param name="categoryCategoryName"> (optional)</param>
        /// <param name="categoryDescription"> (optional)</param>
        /// <param name="categoryPicture"> (optional)</param>
        /// <param name="categoryProducts"> (optional)</param>
        /// <param name="supplierSupplierId"> (optional)</param>
        /// <param name="supplierCompanyName"> (optional)</param>
        /// <param name="supplierContactName"> (optional)</param>
        /// <param name="supplierContactTitle"> (optional)</param>
        /// <param name="supplierAddress"> (optional)</param>
        /// <param name="supplierCity"> (optional)</param>
        /// <param name="supplierRegion"> (optional)</param>
        /// <param name="supplierPostalCode"> (optional)</param>
        /// <param name="supplierCountry"> (optional)</param>
        /// <param name="supplierPhone"> (optional)</param>
        /// <param name="supplierFax"> (optional)</param>
        /// <param name="supplierHomePage"> (optional)</param>
        /// <param name="supplierProducts"> (optional)</param>
        /// <param name="orderDetails"> (optional)</param>
        /// <param name="categories"> (optional)</param>
        /// <param name="suppliers"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiPutProductProductPutAsyncWithHttpInfo (int? productId = null, string productName = null, int? supplierId = null, int? categoryId = null, string quantityPerUnit = null, double? unitPrice = null, int? unitsInStock = null, int? unitsOnOrder = null, int? reorderLevel = null, bool? discontinued = null, int? categoryCategoryId = null, string categoryCategoryName = null, string categoryDescription = null, byte[] categoryPicture = null, List<Product> categoryProducts = null, int? supplierSupplierId = null, string supplierCompanyName = null, string supplierContactName = null, string supplierContactTitle = null, string supplierAddress = null, string supplierCity = null, string supplierRegion = null, string supplierPostalCode = null, string supplierCountry = null, string supplierPhone = null, string supplierFax = null, string supplierHomePage = null, List<Product> supplierProducts = null, List<OrderDetail> orderDetails = null, List<SelectListItem> categories = null, List<SelectListItem> suppliers = null)
        {

            var localVarPath = "/api/PutProduct/product";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarFormParams.Add("ProductId", this.Configuration.ApiClient.ParameterToString(productId)); // form parameter
            if (productName != null) localVarFormParams.Add("ProductName", this.Configuration.ApiClient.ParameterToString(productName)); // form parameter
            if (supplierId != null) localVarFormParams.Add("SupplierId", this.Configuration.ApiClient.ParameterToString(supplierId)); // form parameter
            if (categoryId != null) localVarFormParams.Add("CategoryId", this.Configuration.ApiClient.ParameterToString(categoryId)); // form parameter
            if (quantityPerUnit != null) localVarFormParams.Add("QuantityPerUnit", this.Configuration.ApiClient.ParameterToString(quantityPerUnit)); // form parameter
            if (unitPrice != null) localVarFormParams.Add("UnitPrice", this.Configuration.ApiClient.ParameterToString(unitPrice)); // form parameter
            if (unitsInStock != null) localVarFormParams.Add("UnitsInStock", this.Configuration.ApiClient.ParameterToString(unitsInStock)); // form parameter
            if (unitsOnOrder != null) localVarFormParams.Add("UnitsOnOrder", this.Configuration.ApiClient.ParameterToString(unitsOnOrder)); // form parameter
            if (reorderLevel != null) localVarFormParams.Add("ReorderLevel", this.Configuration.ApiClient.ParameterToString(reorderLevel)); // form parameter
            if (discontinued != null) localVarFormParams.Add("Discontinued", this.Configuration.ApiClient.ParameterToString(discontinued)); // form parameter
            if (categoryCategoryId != null) localVarFormParams.Add("Category.CategoryId", this.Configuration.ApiClient.ParameterToString(categoryCategoryId)); // form parameter
            if (categoryCategoryName != null) localVarFormParams.Add("Category.CategoryName", this.Configuration.ApiClient.ParameterToString(categoryCategoryName)); // form parameter
            if (categoryDescription != null) localVarFormParams.Add("Category.Description", this.Configuration.ApiClient.ParameterToString(categoryDescription)); // form parameter
            if (categoryPicture != null) localVarFormParams.Add("Category.Picture", this.Configuration.ApiClient.ParameterToString(categoryPicture)); // form parameter
            if (categoryProducts != null) localVarFormParams.Add("Category.Products", this.Configuration.ApiClient.ParameterToString(categoryProducts)); // form parameter
            if (supplierSupplierId != null) localVarFormParams.Add("Supplier.SupplierId", this.Configuration.ApiClient.ParameterToString(supplierSupplierId)); // form parameter
            if (supplierCompanyName != null) localVarFormParams.Add("Supplier.CompanyName", this.Configuration.ApiClient.ParameterToString(supplierCompanyName)); // form parameter
            if (supplierContactName != null) localVarFormParams.Add("Supplier.ContactName", this.Configuration.ApiClient.ParameterToString(supplierContactName)); // form parameter
            if (supplierContactTitle != null) localVarFormParams.Add("Supplier.ContactTitle", this.Configuration.ApiClient.ParameterToString(supplierContactTitle)); // form parameter
            if (supplierAddress != null) localVarFormParams.Add("Supplier.Address", this.Configuration.ApiClient.ParameterToString(supplierAddress)); // form parameter
            if (supplierCity != null) localVarFormParams.Add("Supplier.City", this.Configuration.ApiClient.ParameterToString(supplierCity)); // form parameter
            if (supplierRegion != null) localVarFormParams.Add("Supplier.Region", this.Configuration.ApiClient.ParameterToString(supplierRegion)); // form parameter
            if (supplierPostalCode != null) localVarFormParams.Add("Supplier.PostalCode", this.Configuration.ApiClient.ParameterToString(supplierPostalCode)); // form parameter
            if (supplierCountry != null) localVarFormParams.Add("Supplier.Country", this.Configuration.ApiClient.ParameterToString(supplierCountry)); // form parameter
            if (supplierPhone != null) localVarFormParams.Add("Supplier.Phone", this.Configuration.ApiClient.ParameterToString(supplierPhone)); // form parameter
            if (supplierFax != null) localVarFormParams.Add("Supplier.Fax", this.Configuration.ApiClient.ParameterToString(supplierFax)); // form parameter
            if (supplierHomePage != null) localVarFormParams.Add("Supplier.HomePage", this.Configuration.ApiClient.ParameterToString(supplierHomePage)); // form parameter
            if (supplierProducts != null) localVarFormParams.Add("Supplier.Products", this.Configuration.ApiClient.ParameterToString(supplierProducts)); // form parameter
            if (orderDetails != null) localVarFormParams.Add("OrderDetails", this.Configuration.ApiClient.ParameterToString(orderDetails)); // form parameter
            if (categories != null) localVarFormParams.Add("Categories", this.Configuration.ApiClient.ParameterToString(categories)); // form parameter
            if (suppliers != null) localVarFormParams.Add("Suppliers", this.Configuration.ApiClient.ParameterToString(suppliers)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiPutProductProductPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
