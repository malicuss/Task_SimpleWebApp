/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerDemographic
    /// </summary>
    [DataContract]
        public partial class CustomerDemographic :  IEquatable<CustomerDemographic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDemographic" /> class.
        /// </summary>
        /// <param name="customerTypeId">customerTypeId.</param>
        /// <param name="customerDesc">customerDesc.</param>
        /// <param name="customers">customers.</param>
        public CustomerDemographic(string customerTypeId = default(string), string customerDesc = default(string), List<Customer> customers = default(List<Customer>))
        {
            this.CustomerTypeId = customerTypeId;
            this.CustomerDesc = customerDesc;
            this.Customers = customers;
        }
        
        /// <summary>
        /// Gets or Sets CustomerTypeId
        /// </summary>
        [DataMember(Name="customerTypeId", EmitDefaultValue=false)]
        public string CustomerTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerDesc
        /// </summary>
        [DataMember(Name="customerDesc", EmitDefaultValue=false)]
        public string CustomerDesc { get; set; }

        /// <summary>
        /// Gets or Sets Customers
        /// </summary>
        [DataMember(Name="customers", EmitDefaultValue=false)]
        public List<Customer> Customers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerDemographic {\n");
            sb.Append("  CustomerTypeId: ").Append(CustomerTypeId).Append("\n");
            sb.Append("  CustomerDesc: ").Append(CustomerDesc).Append("\n");
            sb.Append("  Customers: ").Append(Customers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerDemographic);
        }

        /// <summary>
        /// Returns true if CustomerDemographic instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerDemographic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDemographic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerTypeId == input.CustomerTypeId ||
                    (this.CustomerTypeId != null &&
                    this.CustomerTypeId.Equals(input.CustomerTypeId))
                ) && 
                (
                    this.CustomerDesc == input.CustomerDesc ||
                    (this.CustomerDesc != null &&
                    this.CustomerDesc.Equals(input.CustomerDesc))
                ) && 
                (
                    this.Customers == input.Customers ||
                    this.Customers != null &&
                    input.Customers != null &&
                    this.Customers.SequenceEqual(input.Customers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerTypeId != null)
                    hashCode = hashCode * 59 + this.CustomerTypeId.GetHashCode();
                if (this.CustomerDesc != null)
                    hashCode = hashCode * 59 + this.CustomerDesc.GetHashCode();
                if (this.Customers != null)
                    hashCode = hashCode * 59 + this.Customers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
