/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
        public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="orderId">orderId.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="employeeId">employeeId.</param>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="requiredDate">requiredDate.</param>
        /// <param name="shippedDate">shippedDate.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="freight">freight.</param>
        /// <param name="shipName">shipName.</param>
        /// <param name="shipAddress">shipAddress.</param>
        /// <param name="shipCity">shipCity.</param>
        /// <param name="shipRegion">shipRegion.</param>
        /// <param name="shipPostalCode">shipPostalCode.</param>
        /// <param name="shipCountry">shipCountry.</param>
        /// <param name="customer">customer.</param>
        /// <param name="employee">employee.</param>
        /// <param name="shipViaNavigation">shipViaNavigation.</param>
        /// <param name="orderDetails">orderDetails.</param>
        public Order(int? orderId = default(int?), string customerId = default(string), int? employeeId = default(int?), DateTime? orderDate = default(DateTime?), DateTime? requiredDate = default(DateTime?), DateTime? shippedDate = default(DateTime?), int? shipVia = default(int?), double? freight = default(double?), string shipName = default(string), string shipAddress = default(string), string shipCity = default(string), string shipRegion = default(string), string shipPostalCode = default(string), string shipCountry = default(string), Customer customer = default(Customer), Employee employee = default(Employee), Shipper shipViaNavigation = default(Shipper), List<OrderDetail> orderDetails = default(List<OrderDetail>))
        {
            this.OrderId = orderId;
            this.CustomerId = customerId;
            this.EmployeeId = employeeId;
            this.OrderDate = orderDate;
            this.RequiredDate = requiredDate;
            this.ShippedDate = shippedDate;
            this.ShipVia = shipVia;
            this.Freight = freight;
            this.ShipName = shipName;
            this.ShipAddress = shipAddress;
            this.ShipCity = shipCity;
            this.ShipRegion = shipRegion;
            this.ShipPostalCode = shipPostalCode;
            this.ShipCountry = shipCountry;
            this.Customer = customer;
            this.Employee = employee;
            this.ShipViaNavigation = shipViaNavigation;
            this.OrderDetails = orderDetails;
        }
        
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeId
        /// </summary>
        [DataMember(Name="employeeId", EmitDefaultValue=false)]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets RequiredDate
        /// </summary>
        [DataMember(Name="requiredDate", EmitDefaultValue=false)]
        public DateTime? RequiredDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippedDate
        /// </summary>
        [DataMember(Name="shippedDate", EmitDefaultValue=false)]
        public DateTime? ShippedDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="shipVia", EmitDefaultValue=false)]
        public int? ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets Freight
        /// </summary>
        [DataMember(Name="freight", EmitDefaultValue=false)]
        public double? Freight { get; set; }

        /// <summary>
        /// Gets or Sets ShipName
        /// </summary>
        [DataMember(Name="shipName", EmitDefaultValue=false)]
        public string ShipName { get; set; }

        /// <summary>
        /// Gets or Sets ShipAddress
        /// </summary>
        [DataMember(Name="shipAddress", EmitDefaultValue=false)]
        public string ShipAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShipCity
        /// </summary>
        [DataMember(Name="shipCity", EmitDefaultValue=false)]
        public string ShipCity { get; set; }

        /// <summary>
        /// Gets or Sets ShipRegion
        /// </summary>
        [DataMember(Name="shipRegion", EmitDefaultValue=false)]
        public string ShipRegion { get; set; }

        /// <summary>
        /// Gets or Sets ShipPostalCode
        /// </summary>
        [DataMember(Name="shipPostalCode", EmitDefaultValue=false)]
        public string ShipPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets ShipCountry
        /// </summary>
        [DataMember(Name="shipCountry", EmitDefaultValue=false)]
        public string ShipCountry { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="employee", EmitDefaultValue=false)]
        public Employee Employee { get; set; }

        /// <summary>
        /// Gets or Sets ShipViaNavigation
        /// </summary>
        [DataMember(Name="shipViaNavigation", EmitDefaultValue=false)]
        public Shipper ShipViaNavigation { get; set; }

        /// <summary>
        /// Gets or Sets OrderDetails
        /// </summary>
        [DataMember(Name="orderDetails", EmitDefaultValue=false)]
        public List<OrderDetail> OrderDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  RequiredDate: ").Append(RequiredDate).Append("\n");
            sb.Append("  ShippedDate: ").Append(ShippedDate).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  Freight: ").Append(Freight).Append("\n");
            sb.Append("  ShipName: ").Append(ShipName).Append("\n");
            sb.Append("  ShipAddress: ").Append(ShipAddress).Append("\n");
            sb.Append("  ShipCity: ").Append(ShipCity).Append("\n");
            sb.Append("  ShipRegion: ").Append(ShipRegion).Append("\n");
            sb.Append("  ShipPostalCode: ").Append(ShipPostalCode).Append("\n");
            sb.Append("  ShipCountry: ").Append(ShipCountry).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  ShipViaNavigation: ").Append(ShipViaNavigation).Append("\n");
            sb.Append("  OrderDetails: ").Append(OrderDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.EmployeeId == input.EmployeeId ||
                    (this.EmployeeId != null &&
                    this.EmployeeId.Equals(input.EmployeeId))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.RequiredDate == input.RequiredDate ||
                    (this.RequiredDate != null &&
                    this.RequiredDate.Equals(input.RequiredDate))
                ) && 
                (
                    this.ShippedDate == input.ShippedDate ||
                    (this.ShippedDate != null &&
                    this.ShippedDate.Equals(input.ShippedDate))
                ) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && 
                (
                    this.Freight == input.Freight ||
                    (this.Freight != null &&
                    this.Freight.Equals(input.Freight))
                ) && 
                (
                    this.ShipName == input.ShipName ||
                    (this.ShipName != null &&
                    this.ShipName.Equals(input.ShipName))
                ) && 
                (
                    this.ShipAddress == input.ShipAddress ||
                    (this.ShipAddress != null &&
                    this.ShipAddress.Equals(input.ShipAddress))
                ) && 
                (
                    this.ShipCity == input.ShipCity ||
                    (this.ShipCity != null &&
                    this.ShipCity.Equals(input.ShipCity))
                ) && 
                (
                    this.ShipRegion == input.ShipRegion ||
                    (this.ShipRegion != null &&
                    this.ShipRegion.Equals(input.ShipRegion))
                ) && 
                (
                    this.ShipPostalCode == input.ShipPostalCode ||
                    (this.ShipPostalCode != null &&
                    this.ShipPostalCode.Equals(input.ShipPostalCode))
                ) && 
                (
                    this.ShipCountry == input.ShipCountry ||
                    (this.ShipCountry != null &&
                    this.ShipCountry.Equals(input.ShipCountry))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && 
                (
                    this.ShipViaNavigation == input.ShipViaNavigation ||
                    (this.ShipViaNavigation != null &&
                    this.ShipViaNavigation.Equals(input.ShipViaNavigation))
                ) && 
                (
                    this.OrderDetails == input.OrderDetails ||
                    this.OrderDetails != null &&
                    input.OrderDetails != null &&
                    this.OrderDetails.SequenceEqual(input.OrderDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.EmployeeId != null)
                    hashCode = hashCode * 59 + this.EmployeeId.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.RequiredDate != null)
                    hashCode = hashCode * 59 + this.RequiredDate.GetHashCode();
                if (this.ShippedDate != null)
                    hashCode = hashCode * 59 + this.ShippedDate.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.Freight != null)
                    hashCode = hashCode * 59 + this.Freight.GetHashCode();
                if (this.ShipName != null)
                    hashCode = hashCode * 59 + this.ShipName.GetHashCode();
                if (this.ShipAddress != null)
                    hashCode = hashCode * 59 + this.ShipAddress.GetHashCode();
                if (this.ShipCity != null)
                    hashCode = hashCode * 59 + this.ShipCity.GetHashCode();
                if (this.ShipRegion != null)
                    hashCode = hashCode * 59 + this.ShipRegion.GetHashCode();
                if (this.ShipPostalCode != null)
                    hashCode = hashCode * 59 + this.ShipPostalCode.GetHashCode();
                if (this.ShipCountry != null)
                    hashCode = hashCode * 59 + this.ShipCountry.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Employee != null)
                    hashCode = hashCode * 59 + this.Employee.GetHashCode();
                if (this.ShipViaNavigation != null)
                    hashCode = hashCode * 59 + this.ShipViaNavigation.GetHashCode();
                if (this.OrderDetails != null)
                    hashCode = hashCode * 59 + this.OrderDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
