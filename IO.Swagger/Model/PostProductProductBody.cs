/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PostProductProductBody
    /// </summary>
    [DataContract]
        public partial class PostProductProductBody :  IEquatable<PostProductProductBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostProductProductBody" /> class.
        /// </summary>
        /// <param name="productId">productId.</param>
        /// <param name="productName">productName (required).</param>
        /// <param name="supplierId">supplierId (required).</param>
        /// <param name="categoryId">categoryId (required).</param>
        /// <param name="quantityPerUnit">quantityPerUnit.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="unitsInStock">unitsInStock.</param>
        /// <param name="unitsOnOrder">unitsOnOrder.</param>
        /// <param name="reorderLevel">reorderLevel.</param>
        /// <param name="discontinued">discontinued.</param>
        /// <param name="categoryCategoryId">categoryCategoryId (required).</param>
        /// <param name="categoryCategoryName">categoryCategoryName (required).</param>
        /// <param name="categoryDescription">categoryDescription.</param>
        /// <param name="categoryPicture">categoryPicture.</param>
        /// <param name="categoryProducts">categoryProducts.</param>
        /// <param name="supplierSupplierId">supplierSupplierId.</param>
        /// <param name="supplierCompanyName">supplierCompanyName.</param>
        /// <param name="supplierContactName">supplierContactName.</param>
        /// <param name="supplierContactTitle">supplierContactTitle.</param>
        /// <param name="supplierAddress">supplierAddress.</param>
        /// <param name="supplierCity">supplierCity.</param>
        /// <param name="supplierRegion">supplierRegion.</param>
        /// <param name="supplierPostalCode">supplierPostalCode.</param>
        /// <param name="supplierCountry">supplierCountry.</param>
        /// <param name="supplierPhone">supplierPhone.</param>
        /// <param name="supplierFax">supplierFax.</param>
        /// <param name="supplierHomePage">supplierHomePage.</param>
        /// <param name="supplierProducts">supplierProducts.</param>
        /// <param name="orderDetails">orderDetails.</param>
        /// <param name="categories">categories.</param>
        /// <param name="suppliers">suppliers.</param>
        public PostProductProductBody(int? productId = default(int?), string productName = default(string), int? supplierId = default(int?), int? categoryId = default(int?), string quantityPerUnit = default(string), double? unitPrice = default(double?), int? unitsInStock = default(int?), int? unitsOnOrder = default(int?), int? reorderLevel = default(int?), bool? discontinued = default(bool?), int? categoryCategoryId = default(int?), string categoryCategoryName = default(string), string categoryDescription = default(string), byte[] categoryPicture = default(byte[]), List<Product> categoryProducts = default(List<Product>), int? supplierSupplierId = default(int?), string supplierCompanyName = default(string), string supplierContactName = default(string), string supplierContactTitle = default(string), string supplierAddress = default(string), string supplierCity = default(string), string supplierRegion = default(string), string supplierPostalCode = default(string), string supplierCountry = default(string), string supplierPhone = default(string), string supplierFax = default(string), string supplierHomePage = default(string), List<Product> supplierProducts = default(List<Product>), List<OrderDetail> orderDetails = default(List<OrderDetail>), List<SelectListItem> categories = default(List<SelectListItem>), List<SelectListItem> suppliers = default(List<SelectListItem>))
        {
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new InvalidDataException("productName is a required property for PostProductProductBody and cannot be null");
            }
            else
            {
                this.ProductName = productName;
            }
            // to ensure "supplierId" is required (not null)
            if (supplierId == null)
            {
                throw new InvalidDataException("supplierId is a required property for PostProductProductBody and cannot be null");
            }
            else
            {
                this.SupplierId = supplierId;
            }
            // to ensure "categoryId" is required (not null)
            if (categoryId == null)
            {
                throw new InvalidDataException("categoryId is a required property for PostProductProductBody and cannot be null");
            }
            else
            {
                this.CategoryId = categoryId;
            }
            // to ensure "categoryCategoryId" is required (not null)
            if (categoryCategoryId == null)
            {
                throw new InvalidDataException("categoryCategoryId is a required property for PostProductProductBody and cannot be null");
            }
            else
            {
                this.CategoryCategoryId = categoryCategoryId;
            }
            // to ensure "categoryCategoryName" is required (not null)
            if (categoryCategoryName == null)
            {
                throw new InvalidDataException("categoryCategoryName is a required property for PostProductProductBody and cannot be null");
            }
            else
            {
                this.CategoryCategoryName = categoryCategoryName;
            }
            this.ProductId = productId;
            this.QuantityPerUnit = quantityPerUnit;
            this.UnitPrice = unitPrice;
            this.UnitsInStock = unitsInStock;
            this.UnitsOnOrder = unitsOnOrder;
            this.ReorderLevel = reorderLevel;
            this.Discontinued = discontinued;
            this.CategoryDescription = categoryDescription;
            this.CategoryPicture = categoryPicture;
            this.CategoryProducts = categoryProducts;
            this.SupplierSupplierId = supplierSupplierId;
            this.SupplierCompanyName = supplierCompanyName;
            this.SupplierContactName = supplierContactName;
            this.SupplierContactTitle = supplierContactTitle;
            this.SupplierAddress = supplierAddress;
            this.SupplierCity = supplierCity;
            this.SupplierRegion = supplierRegion;
            this.SupplierPostalCode = supplierPostalCode;
            this.SupplierCountry = supplierCountry;
            this.SupplierPhone = supplierPhone;
            this.SupplierFax = supplierFax;
            this.SupplierHomePage = supplierHomePage;
            this.SupplierProducts = supplierProducts;
            this.OrderDetails = orderDetails;
            this.Categories = categories;
            this.Suppliers = suppliers;
        }
        
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="ProductId", EmitDefaultValue=false)]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name="ProductName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets SupplierId
        /// </summary>
        [DataMember(Name="SupplierId", EmitDefaultValue=false)]
        public int? SupplierId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="CategoryId", EmitDefaultValue=false)]
        public int? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPerUnit
        /// </summary>
        [DataMember(Name="QuantityPerUnit", EmitDefaultValue=false)]
        public string QuantityPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitsInStock
        /// </summary>
        [DataMember(Name="UnitsInStock", EmitDefaultValue=false)]
        public int? UnitsInStock { get; set; }

        /// <summary>
        /// Gets or Sets UnitsOnOrder
        /// </summary>
        [DataMember(Name="UnitsOnOrder", EmitDefaultValue=false)]
        public int? UnitsOnOrder { get; set; }

        /// <summary>
        /// Gets or Sets ReorderLevel
        /// </summary>
        [DataMember(Name="ReorderLevel", EmitDefaultValue=false)]
        public int? ReorderLevel { get; set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [DataMember(Name="Discontinued", EmitDefaultValue=false)]
        public bool? Discontinued { get; set; }

        /// <summary>
        /// Gets or Sets CategoryCategoryId
        /// </summary>
        [DataMember(Name="Category.CategoryId", EmitDefaultValue=false)]
        public int? CategoryCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CategoryCategoryName
        /// </summary>
        [DataMember(Name="Category.CategoryName", EmitDefaultValue=false)]
        public string CategoryCategoryName { get; set; }

        /// <summary>
        /// Gets or Sets CategoryDescription
        /// </summary>
        [DataMember(Name="Category.Description", EmitDefaultValue=false)]
        public string CategoryDescription { get; set; }

        /// <summary>
        /// Gets or Sets CategoryPicture
        /// </summary>
        [DataMember(Name="Category.Picture", EmitDefaultValue=false)]
        public byte[] CategoryPicture { get; set; }

        /// <summary>
        /// Gets or Sets CategoryProducts
        /// </summary>
        [DataMember(Name="Category.Products", EmitDefaultValue=false)]
        public List<Product> CategoryProducts { get; set; }

        /// <summary>
        /// Gets or Sets SupplierSupplierId
        /// </summary>
        [DataMember(Name="Supplier.SupplierId", EmitDefaultValue=false)]
        public int? SupplierSupplierId { get; set; }

        /// <summary>
        /// Gets or Sets SupplierCompanyName
        /// </summary>
        [DataMember(Name="Supplier.CompanyName", EmitDefaultValue=false)]
        public string SupplierCompanyName { get; set; }

        /// <summary>
        /// Gets or Sets SupplierContactName
        /// </summary>
        [DataMember(Name="Supplier.ContactName", EmitDefaultValue=false)]
        public string SupplierContactName { get; set; }

        /// <summary>
        /// Gets or Sets SupplierContactTitle
        /// </summary>
        [DataMember(Name="Supplier.ContactTitle", EmitDefaultValue=false)]
        public string SupplierContactTitle { get; set; }

        /// <summary>
        /// Gets or Sets SupplierAddress
        /// </summary>
        [DataMember(Name="Supplier.Address", EmitDefaultValue=false)]
        public string SupplierAddress { get; set; }

        /// <summary>
        /// Gets or Sets SupplierCity
        /// </summary>
        [DataMember(Name="Supplier.City", EmitDefaultValue=false)]
        public string SupplierCity { get; set; }

        /// <summary>
        /// Gets or Sets SupplierRegion
        /// </summary>
        [DataMember(Name="Supplier.Region", EmitDefaultValue=false)]
        public string SupplierRegion { get; set; }

        /// <summary>
        /// Gets or Sets SupplierPostalCode
        /// </summary>
        [DataMember(Name="Supplier.PostalCode", EmitDefaultValue=false)]
        public string SupplierPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets SupplierCountry
        /// </summary>
        [DataMember(Name="Supplier.Country", EmitDefaultValue=false)]
        public string SupplierCountry { get; set; }

        /// <summary>
        /// Gets or Sets SupplierPhone
        /// </summary>
        [DataMember(Name="Supplier.Phone", EmitDefaultValue=false)]
        public string SupplierPhone { get; set; }

        /// <summary>
        /// Gets or Sets SupplierFax
        /// </summary>
        [DataMember(Name="Supplier.Fax", EmitDefaultValue=false)]
        public string SupplierFax { get; set; }

        /// <summary>
        /// Gets or Sets SupplierHomePage
        /// </summary>
        [DataMember(Name="Supplier.HomePage", EmitDefaultValue=false)]
        public string SupplierHomePage { get; set; }

        /// <summary>
        /// Gets or Sets SupplierProducts
        /// </summary>
        [DataMember(Name="Supplier.Products", EmitDefaultValue=false)]
        public List<Product> SupplierProducts { get; set; }

        /// <summary>
        /// Gets or Sets OrderDetails
        /// </summary>
        [DataMember(Name="OrderDetails", EmitDefaultValue=false)]
        public List<OrderDetail> OrderDetails { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="Categories", EmitDefaultValue=false)]
        public List<SelectListItem> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Suppliers
        /// </summary>
        [DataMember(Name="Suppliers", EmitDefaultValue=false)]
        public List<SelectListItem> Suppliers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostProductProductBody {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  QuantityPerUnit: ").Append(QuantityPerUnit).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitsInStock: ").Append(UnitsInStock).Append("\n");
            sb.Append("  UnitsOnOrder: ").Append(UnitsOnOrder).Append("\n");
            sb.Append("  ReorderLevel: ").Append(ReorderLevel).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("  CategoryCategoryId: ").Append(CategoryCategoryId).Append("\n");
            sb.Append("  CategoryCategoryName: ").Append(CategoryCategoryName).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  CategoryPicture: ").Append(CategoryPicture).Append("\n");
            sb.Append("  CategoryProducts: ").Append(CategoryProducts).Append("\n");
            sb.Append("  SupplierSupplierId: ").Append(SupplierSupplierId).Append("\n");
            sb.Append("  SupplierCompanyName: ").Append(SupplierCompanyName).Append("\n");
            sb.Append("  SupplierContactName: ").Append(SupplierContactName).Append("\n");
            sb.Append("  SupplierContactTitle: ").Append(SupplierContactTitle).Append("\n");
            sb.Append("  SupplierAddress: ").Append(SupplierAddress).Append("\n");
            sb.Append("  SupplierCity: ").Append(SupplierCity).Append("\n");
            sb.Append("  SupplierRegion: ").Append(SupplierRegion).Append("\n");
            sb.Append("  SupplierPostalCode: ").Append(SupplierPostalCode).Append("\n");
            sb.Append("  SupplierCountry: ").Append(SupplierCountry).Append("\n");
            sb.Append("  SupplierPhone: ").Append(SupplierPhone).Append("\n");
            sb.Append("  SupplierFax: ").Append(SupplierFax).Append("\n");
            sb.Append("  SupplierHomePage: ").Append(SupplierHomePage).Append("\n");
            sb.Append("  SupplierProducts: ").Append(SupplierProducts).Append("\n");
            sb.Append("  OrderDetails: ").Append(OrderDetails).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Suppliers: ").Append(Suppliers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostProductProductBody);
        }

        /// <summary>
        /// Returns true if PostProductProductBody instances are equal
        /// </summary>
        /// <param name="input">Instance of PostProductProductBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostProductProductBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.SupplierId == input.SupplierId ||
                    (this.SupplierId != null &&
                    this.SupplierId.Equals(input.SupplierId))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.QuantityPerUnit == input.QuantityPerUnit ||
                    (this.QuantityPerUnit != null &&
                    this.QuantityPerUnit.Equals(input.QuantityPerUnit))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.UnitsInStock == input.UnitsInStock ||
                    (this.UnitsInStock != null &&
                    this.UnitsInStock.Equals(input.UnitsInStock))
                ) && 
                (
                    this.UnitsOnOrder == input.UnitsOnOrder ||
                    (this.UnitsOnOrder != null &&
                    this.UnitsOnOrder.Equals(input.UnitsOnOrder))
                ) && 
                (
                    this.ReorderLevel == input.ReorderLevel ||
                    (this.ReorderLevel != null &&
                    this.ReorderLevel.Equals(input.ReorderLevel))
                ) && 
                (
                    this.Discontinued == input.Discontinued ||
                    (this.Discontinued != null &&
                    this.Discontinued.Equals(input.Discontinued))
                ) && 
                (
                    this.CategoryCategoryId == input.CategoryCategoryId ||
                    (this.CategoryCategoryId != null &&
                    this.CategoryCategoryId.Equals(input.CategoryCategoryId))
                ) && 
                (
                    this.CategoryCategoryName == input.CategoryCategoryName ||
                    (this.CategoryCategoryName != null &&
                    this.CategoryCategoryName.Equals(input.CategoryCategoryName))
                ) && 
                (
                    this.CategoryDescription == input.CategoryDescription ||
                    (this.CategoryDescription != null &&
                    this.CategoryDescription.Equals(input.CategoryDescription))
                ) && 
                (
                    this.CategoryPicture == input.CategoryPicture ||
                    (this.CategoryPicture != null &&
                    this.CategoryPicture.Equals(input.CategoryPicture))
                ) && 
                (
                    this.CategoryProducts == input.CategoryProducts ||
                    this.CategoryProducts != null &&
                    input.CategoryProducts != null &&
                    this.CategoryProducts.SequenceEqual(input.CategoryProducts)
                ) && 
                (
                    this.SupplierSupplierId == input.SupplierSupplierId ||
                    (this.SupplierSupplierId != null &&
                    this.SupplierSupplierId.Equals(input.SupplierSupplierId))
                ) && 
                (
                    this.SupplierCompanyName == input.SupplierCompanyName ||
                    (this.SupplierCompanyName != null &&
                    this.SupplierCompanyName.Equals(input.SupplierCompanyName))
                ) && 
                (
                    this.SupplierContactName == input.SupplierContactName ||
                    (this.SupplierContactName != null &&
                    this.SupplierContactName.Equals(input.SupplierContactName))
                ) && 
                (
                    this.SupplierContactTitle == input.SupplierContactTitle ||
                    (this.SupplierContactTitle != null &&
                    this.SupplierContactTitle.Equals(input.SupplierContactTitle))
                ) && 
                (
                    this.SupplierAddress == input.SupplierAddress ||
                    (this.SupplierAddress != null &&
                    this.SupplierAddress.Equals(input.SupplierAddress))
                ) && 
                (
                    this.SupplierCity == input.SupplierCity ||
                    (this.SupplierCity != null &&
                    this.SupplierCity.Equals(input.SupplierCity))
                ) && 
                (
                    this.SupplierRegion == input.SupplierRegion ||
                    (this.SupplierRegion != null &&
                    this.SupplierRegion.Equals(input.SupplierRegion))
                ) && 
                (
                    this.SupplierPostalCode == input.SupplierPostalCode ||
                    (this.SupplierPostalCode != null &&
                    this.SupplierPostalCode.Equals(input.SupplierPostalCode))
                ) && 
                (
                    this.SupplierCountry == input.SupplierCountry ||
                    (this.SupplierCountry != null &&
                    this.SupplierCountry.Equals(input.SupplierCountry))
                ) && 
                (
                    this.SupplierPhone == input.SupplierPhone ||
                    (this.SupplierPhone != null &&
                    this.SupplierPhone.Equals(input.SupplierPhone))
                ) && 
                (
                    this.SupplierFax == input.SupplierFax ||
                    (this.SupplierFax != null &&
                    this.SupplierFax.Equals(input.SupplierFax))
                ) && 
                (
                    this.SupplierHomePage == input.SupplierHomePage ||
                    (this.SupplierHomePage != null &&
                    this.SupplierHomePage.Equals(input.SupplierHomePage))
                ) && 
                (
                    this.SupplierProducts == input.SupplierProducts ||
                    this.SupplierProducts != null &&
                    input.SupplierProducts != null &&
                    this.SupplierProducts.SequenceEqual(input.SupplierProducts)
                ) && 
                (
                    this.OrderDetails == input.OrderDetails ||
                    this.OrderDetails != null &&
                    input.OrderDetails != null &&
                    this.OrderDetails.SequenceEqual(input.OrderDetails)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Suppliers == input.Suppliers ||
                    this.Suppliers != null &&
                    input.Suppliers != null &&
                    this.Suppliers.SequenceEqual(input.Suppliers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.SupplierId != null)
                    hashCode = hashCode * 59 + this.SupplierId.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.QuantityPerUnit != null)
                    hashCode = hashCode * 59 + this.QuantityPerUnit.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.UnitsInStock != null)
                    hashCode = hashCode * 59 + this.UnitsInStock.GetHashCode();
                if (this.UnitsOnOrder != null)
                    hashCode = hashCode * 59 + this.UnitsOnOrder.GetHashCode();
                if (this.ReorderLevel != null)
                    hashCode = hashCode * 59 + this.ReorderLevel.GetHashCode();
                if (this.Discontinued != null)
                    hashCode = hashCode * 59 + this.Discontinued.GetHashCode();
                if (this.CategoryCategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryCategoryId.GetHashCode();
                if (this.CategoryCategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryCategoryName.GetHashCode();
                if (this.CategoryDescription != null)
                    hashCode = hashCode * 59 + this.CategoryDescription.GetHashCode();
                if (this.CategoryPicture != null)
                    hashCode = hashCode * 59 + this.CategoryPicture.GetHashCode();
                if (this.CategoryProducts != null)
                    hashCode = hashCode * 59 + this.CategoryProducts.GetHashCode();
                if (this.SupplierSupplierId != null)
                    hashCode = hashCode * 59 + this.SupplierSupplierId.GetHashCode();
                if (this.SupplierCompanyName != null)
                    hashCode = hashCode * 59 + this.SupplierCompanyName.GetHashCode();
                if (this.SupplierContactName != null)
                    hashCode = hashCode * 59 + this.SupplierContactName.GetHashCode();
                if (this.SupplierContactTitle != null)
                    hashCode = hashCode * 59 + this.SupplierContactTitle.GetHashCode();
                if (this.SupplierAddress != null)
                    hashCode = hashCode * 59 + this.SupplierAddress.GetHashCode();
                if (this.SupplierCity != null)
                    hashCode = hashCode * 59 + this.SupplierCity.GetHashCode();
                if (this.SupplierRegion != null)
                    hashCode = hashCode * 59 + this.SupplierRegion.GetHashCode();
                if (this.SupplierPostalCode != null)
                    hashCode = hashCode * 59 + this.SupplierPostalCode.GetHashCode();
                if (this.SupplierCountry != null)
                    hashCode = hashCode * 59 + this.SupplierCountry.GetHashCode();
                if (this.SupplierPhone != null)
                    hashCode = hashCode * 59 + this.SupplierPhone.GetHashCode();
                if (this.SupplierFax != null)
                    hashCode = hashCode * 59 + this.SupplierFax.GetHashCode();
                if (this.SupplierHomePage != null)
                    hashCode = hashCode * 59 + this.SupplierHomePage.GetHashCode();
                if (this.SupplierProducts != null)
                    hashCode = hashCode * 59 + this.SupplierProducts.GetHashCode();
                if (this.OrderDetails != null)
                    hashCode = hashCode * 59 + this.OrderDetails.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Suppliers != null)
                    hashCode = hashCode * 59 + this.Suppliers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
