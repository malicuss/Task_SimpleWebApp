/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Region
    /// </summary>
    [DataContract]
        public partial class Region :  IEquatable<Region>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Region" /> class.
        /// </summary>
        /// <param name="regionId">regionId.</param>
        /// <param name="regionDescription">regionDescription.</param>
        /// <param name="territories">territories.</param>
        public Region(int? regionId = default(int?), string regionDescription = default(string), List<Territory> territories = default(List<Territory>))
        {
            this.RegionId = regionId;
            this.RegionDescription = regionDescription;
            this.Territories = territories;
        }
        
        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public int? RegionId { get; set; }

        /// <summary>
        /// Gets or Sets RegionDescription
        /// </summary>
        [DataMember(Name="regionDescription", EmitDefaultValue=false)]
        public string RegionDescription { get; set; }

        /// <summary>
        /// Gets or Sets Territories
        /// </summary>
        [DataMember(Name="territories", EmitDefaultValue=false)]
        public List<Territory> Territories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Region {\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  RegionDescription: ").Append(RegionDescription).Append("\n");
            sb.Append("  Territories: ").Append(Territories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Region);
        }

        /// <summary>
        /// Returns true if Region instances are equal
        /// </summary>
        /// <param name="input">Instance of Region to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Region input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.RegionDescription == input.RegionDescription ||
                    (this.RegionDescription != null &&
                    this.RegionDescription.Equals(input.RegionDescription))
                ) && 
                (
                    this.Territories == input.Territories ||
                    this.Territories != null &&
                    input.Territories != null &&
                    this.Territories.SequenceEqual(input.Territories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.RegionDescription != null)
                    hashCode = hashCode * 59 + this.RegionDescription.GetHashCode();
                if (this.Territories != null)
                    hashCode = hashCode * 59 + this.Territories.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
