/* 
 * Simple Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Territory
    /// </summary>
    [DataContract]
        public partial class Territory :  IEquatable<Territory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Territory" /> class.
        /// </summary>
        /// <param name="territoryId">territoryId.</param>
        /// <param name="territoryDescription">territoryDescription.</param>
        /// <param name="regionId">regionId.</param>
        /// <param name="region">region.</param>
        /// <param name="employees">employees.</param>
        public Territory(string territoryId = default(string), string territoryDescription = default(string), int? regionId = default(int?), Region region = default(Region), List<Employee> employees = default(List<Employee>))
        {
            this.TerritoryId = territoryId;
            this.TerritoryDescription = territoryDescription;
            this.RegionId = regionId;
            this.Region = region;
            this.Employees = employees;
        }
        
        /// <summary>
        /// Gets or Sets TerritoryId
        /// </summary>
        [DataMember(Name="territoryId", EmitDefaultValue=false)]
        public string TerritoryId { get; set; }

        /// <summary>
        /// Gets or Sets TerritoryDescription
        /// </summary>
        [DataMember(Name="territoryDescription", EmitDefaultValue=false)]
        public string TerritoryDescription { get; set; }

        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public int? RegionId { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public Region Region { get; set; }

        /// <summary>
        /// Gets or Sets Employees
        /// </summary>
        [DataMember(Name="employees", EmitDefaultValue=false)]
        public List<Employee> Employees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Territory {\n");
            sb.Append("  TerritoryId: ").Append(TerritoryId).Append("\n");
            sb.Append("  TerritoryDescription: ").Append(TerritoryDescription).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Employees: ").Append(Employees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Territory);
        }

        /// <summary>
        /// Returns true if Territory instances are equal
        /// </summary>
        /// <param name="input">Instance of Territory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Territory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TerritoryId == input.TerritoryId ||
                    (this.TerritoryId != null &&
                    this.TerritoryId.Equals(input.TerritoryId))
                ) && 
                (
                    this.TerritoryDescription == input.TerritoryDescription ||
                    (this.TerritoryDescription != null &&
                    this.TerritoryDescription.Equals(input.TerritoryDescription))
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Employees == input.Employees ||
                    this.Employees != null &&
                    input.Employees != null &&
                    this.Employees.SequenceEqual(input.Employees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TerritoryId != null)
                    hashCode = hashCode * 59 + this.TerritoryId.GetHashCode();
                if (this.TerritoryDescription != null)
                    hashCode = hashCode * 59 + this.TerritoryDescription.GetHashCode();
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Employees != null)
                    hashCode = hashCode * 59 + this.Employees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
